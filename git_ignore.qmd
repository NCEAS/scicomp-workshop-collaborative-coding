---
title: "The `.gitignore`"
---

## Overview

The purpose of the `.gitignore` is evident in its name: anything included in it is *ignored by `git`*. This can be useful if you want to include data in your local version of your repository but don't want to risk sharing that data by committing it. This file exists at the top level of every repository and can be customized however is most useful to you and your collaborators.

## Creating a `.gitignore`

When you first create a repository you will have the opportunity to select a template `.gitignore` based on the coding language you plan on using. In the "New Repository" process, scroll down to just below where you can choose to add a README.

<p align="center">
<img src="images/git_ignore/ignore-2-new-repo-p2.png" width = "70%"/>
</p>

Underneath the title "Add .gitignore" there is a dropdown menu for various templates that starts at "None". If you click this dropdown menu you can type in keywords that will help you identify the template that you want to use.

<p align="center">
<img src="images/git_ignore/ignore-3-template-search.png" width = "70%"/>
</p>

Unfortunately for R users, typing just "R" returns all templates that contain the letter 'r' so you will need to scroll a bit to find the option that is actually for the R Statistical Environment. Once you find the option you want, click it and the template dropdown should change from ".gitignore template: None" to ".gitignore template: \<your pick\>".

<p align="center">
<img src="images/git_ignore/ignore-4-template-pick.png" width = "70%"/>
</p>

If you create a repository without choosing a `.gitignore` template, don't worry! A less detailed one will be created automatically when you clone your repository to your local computer. You can then add whatever information you want and make it contain the same information as the starter template.

## Interacting with the `.gitignore`

Once you have the one, you can open the `.gitignore` by clicking it from the "Files" pane of RStudio.

<p align="center">
<img src="images/git_ignore/ignore-5-rstudio-files.png" width = "65%"/>
</p>

After you click it you'll be looking at a file that looks very similar to any other file in RStudio.

<p align="center">
<img src="images/git_ignore/ignore-6-viewing.png" width = "100%"/>
</p>

Now let's add something to it! As you can see from the Git pane of the above image (top right), after cloning our new repository, the only file `git` is flagging as untracked is the .Rproj file created whenever you make a new RStudio project.

If we add `*.Rproj` to our `.gitignore`, the Git pane will show that the only change is that lines have been added to the `.gitignore`. The .Rproj file with the double yellow question marks next to it is gone!

<p align="center">
<img src="images/git_ignore/ignore-7-editing.png" width = "100%"/>
</p>

Once you've edited the `.gitignore` it is generally a good practice to push those changes as soon as possible. If you flag a certain file (or folder) to be ignored while someone else is depending on it, if you wait to push the change you can risk a serious conflict. Or, they might commit a file you want ignored which is frustrating to remove (see "Exceptions to the `.gitignore`" below).

<p align="center">
<img src="images/git_ignore/ignore-8-commit.png" width = "80%"/>
</p>

Only the commit is pictured above, but pushing & pulling works in the same way here as it does elsewhere.

## Our Recommendations

There are many different opinions on what should go into a `.gitignore` but we have a few suggestions that might prove helpful (or are at least worth considering).

1. **Use the GitHub `.gitignore` template for your chosen programming environment**

    - There are a lot of small files that typical users don't care about that your project will accumulate over its lifecycle. If you don't flag these in the `.gitignore` it can become difficult to sort through your repository

2. **If you are an R user, add `*.Rproj`**

    - If you accidentally commit the .Rproj, then delete it, and commit that deletion, everyone who pulls that change will delete the repository they are working in. By adding the .Rproj to the `.gitignore` at the start of your project you avoid the chance of anyone making this mistake
    - The `*` is a wildcard so regardless of what collaborators name their clone of the repository, they won't be able to commit it. This is nice to avoid the above error and to prevent a single repository from containing multiple .Rproj files and confusing people

3. **Add `.DS_Store`**

    - Macs create a "Desktop Services Store" file (or ".DS_Store" for short) every time you open a folder. This file is invisible in your file manager but _can_ be committed. This file has no practical value in your project and a separate one exists in every subfolder so tracking them can quickly clutter a repository if you use subfolders

4. **Other Considerations**

    - Some people recommend adding <u>everything your script creates</u> to the `.gitignore`. The theory being that if someone wants to see those outputs, they would only need to run your script(s) in order to create their own versions
    - Another way of thinking about this is to create a dedicated folder to store products in (e.g., "data", "exports", etc.) and then add that folder to the `.gitignore`. This means you don't need to worry about adding specific files to the `.gitignore` so long as all the files live in a folder you've already designated as something for `git` to not track
    - Have another idea for what you typically add to a `.gitignore`? Please share it with us by [posting an Issue](https://github.com/NCEAS/scicomp-workshop-collaborative-coding/issues); we'd love to hear from you!

## Exceptions to the `.gitignore`

Imagine a situation where you commit a data file to your GitHub repository and push that commit. Now your data file is tracked by `git` and every time you alter that file RStudio's "Git" pane will notify you that the file changed by placing the blue "M" next to the file's name. Let's say that eventually you decide that you want to (1) remove the file from your GitHub repository and (2) stop `git` from tracking *future* changes to the file. If this is the case, you'll need to do the following:

1. Either (A) delete the file or (B) move it out of the repository's folder

    - Either option will register as "deleting" the file from `git`'s perspective

2. **Commit** the deletion

3. **<span style="color:green">Push</span>** that change

4. Add the name of that file to your `.gitignore`

Once you've done these steps, even if you put the file back in your repository, `git` won't track its addition or any changes to it over time.
