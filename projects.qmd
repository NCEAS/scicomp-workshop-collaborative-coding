---
title: "GitHub Projects"
---

## Module Learning Objectives

By the end of this module, you will be able to:

- <u>Define</u> a project in the context of GitHub
- <u>Summarize</u> the different features of projects created within (A) organizations, (B) users, and (C) repositories

## What is a Project?

Projects are GitHub's primary strategic project management tool. While issues can be very useful for particular tasks, they are less valuable for making larger-scale plans and tracking evolving priorities. **A Project acts as an umbrella that includes many issues** and tracks their inter-relationships and where they fit in a bigger-picture view of a project.

## Using Projects

Within the team that created this workshop, we use GitHub Issues to track and document each task that we do for a working group. We then use a GitHub Project to let each team member track all of their Issues *and* ensure that we rotate through which group we are helping. This guarantees equitable effort for each working group and allows each team member to balance all of the tasks on their docket at any given moment.

See below for a screencap of what such a Project looks like for one team member.

<img src="images/projects/projects-1-example.png" width="100%"/>

When using a Project you can add or remove the columns (the above example has four columns) and individual issue "cards" can be clicked and dragged among columns. You can also automate a column so that Issues that meet certain criteria are automatically moved to a particular column (e.g., Issues added to this Project are automatically moved to the "Done" column).

## Maximizing Project Utility

It may go without saying, but Projects are at their most valuable as project management tools when you make effective use of GitHub Issues. Specifically, the three Issue capabilities that will benefit your adoption of Projects are as follows:

1. Giving Issues clear and short titles
2. "Assigning" Issues to particular users
3. Using labels to group Issues into useful categories

If your team is considering these three points, then adopting GitHub Projects will further empower your ability to track your internal tasks over time. Feel free to consult [our page on Issues](https://nceas.github.io/scicomp-workshop-collaborative-coding/issues.html) for more information!

## Project Ownership

Projects can only be created for a particular User or an Organization. In either case, any number of users can be allowed access to the Project. The list of all Projects owned by an Organization/User can be accessed via the "Projects" tab. Note that this tab's name is consistent for Users and Organizations; Organizations just have more tabs to support the expanded set of tools available to them.

<img src="images/projects/projects-2-org.png" width="100%"/>

Once a Project has been created, it can be "linked" to any number of repositories owned by that entity. This can be done from the "Projects" tab of each repository to which linking is desired.

<img src="images/projects/projects-3-linking.png" width="100%"/>

## Integrating Issues & Projects

Once you've created the Project(s) you want, issues can be added to them as desired! You can either add issues at the Issue creation stage or from the Project itself after the Issue has been created.

### Adding from an Issue

When you first create an issue you can add it to one or more Projects by clicking the gear icon in the sidebar of options on the right side of the screen.

<img src="images/projects/projects-4-add-from-issue.png" width="100%"/>

Upon clicking that icon, a small window will pop up and will allow you to choose any Project (A) you've interacted with recently, (B) that is linked to this particular repository, and/or (C) that is owned by the Organization/User that owns the repository. If there are many projects that meet these criteria there is also a handy search bar that lets you search through for a specific Project by name.

<p align="center">
<img src="images/projects/projects-4b-add-from-issue.png" width="40%"/>
</p>

### Adding from a Project

If you'd prefer, you can add existing issues to a Project from the Project's home screen. Once in the Project, click the "Add item" button at the bottom of the screen and begin typing the name of the issue. Clicking an issue's name will then automatically add it to the Project and will allow you to "triage" it (i.e., add the issue to the column indicating its current status).

<p align="center">
<img src="images/projects/projects-5-add-from-project.png" width="75%"/>
</p>


## OLD




Projects can be created for a particular User (or Organization) and subsequently "linked" to any repositories owned by the same entity. The Project is then visible to 


Projects can be created in one of three places with meaningful differences for each:

1. A Project can be created for an Organization
2. A Project can be created for a User
3. A Project can be created for a Repository

### Organization Projects


A Project created for an Organization allows all GitHub users *with access to that organization* to add issues to the Project and move them around within a Project. This can be really valuable because no special settings need to be touched in order to allow all users to meaningfully interact with issues. Both [LTER](https://github.com/lter) and [NCEAS](https://github.com/NCEAS) have existing organizations that can support Projects created for working groups.

- Supports issues from *any repository*
- Editable by any user **in the organization**

### User Projects


A Project created within a particular user's "self" can also accept issues from any repository. However, the Project can only be interacted with by the user unless that user modifies their settings to specify other users who are granted special access to the Project.

- Supports issues from *any repository*
- Editable by **only this user***
    - \* Unless that user tweaks their settings to allow other specified users to have admin-level powers in that Project

### Repository Projects


A Project created within a repository can only be used for issues posted on that repository and by users with access to the the repository. **This is the most narrowly-defined type of Project.** That said, it can be very valuable if you anticipate **(1)** that the repository that "owns" this Project will involve many large goals that would require the level of project management supported by GitHub Projects and **(2)** that these tasks will *never* grow to involve other repositories.

- Supports issues **only from that repository**
- Editable by any user with access to the repository
